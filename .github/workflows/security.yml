name: Security Scanning

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.16.0'

jobs:
  # Dependency Vulnerability Scanning
  dependency_scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
    
    - name: Get Dependencies
      run: flutter pub get
    
    - name: Run Flutter Pub Audit
      run: |
        flutter pub audit --json > flutter-audit.json || true
        flutter pub audit
    
    - name: Upload Flutter Audit Results
      uses: actions/upload-artifact@v3
      with:
        name: flutter-audit-results
        path: flutter-audit.json
    
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'CropFresh Farmers App'
        path: '.'
        format: 'ALL'
        out: 'dependency-check-report'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7
          --suppression dependency-check-suppressions.xml
    
    - name: Upload OWASP Dependency Check results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: dependency-check-report/
    
    - name: Upload SARIF to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: dependency-check-report/dependency-check-report.sarif

  # Code Security Analysis
  code_security:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
    
    - name: Get Dependencies
      run: flutter pub get
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: dart
        queries: security-extended,security-and-quality
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:dart"
    
    - name: Run Semgrep Static Analysis
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/flutter
        generateSarif: "1"
    
    - name: Upload Semgrep results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif

  # Secret Detection
  secret_scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified
    
    - name: GitLeaks Scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
    
    - name: Detect Secrets
      run: |
        pip install detect-secrets
        detect-secrets scan --all-files --baseline .secrets.baseline
        detect-secrets audit .secrets.baseline

  # Container Security (if using Docker)
  container_scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[docker]') || github.event_name == 'schedule'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Build Docker Image
      run: |
        docker build -t cropfresh-farmers:latest .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'cropfresh-farmers:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Snyk Container Test
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: cropfresh-farmers:latest
        args: --severity-threshold=high --file=Dockerfile

  # License Compliance
  license_check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
    
    - name: Get Dependencies
      run: flutter pub get
    
    - name: Check Licenses
      run: |
        # Generate license report
        flutter pub deps --json | jq -r '.packages[] | select(.kind != "dev") | "\(.name),\(.version)"' > dependencies.csv
        
        echo "Package,Version" > license-report.csv
        cat dependencies.csv >> license-report.csv
        
        # Check for incompatible licenses
        echo "üìÑ Checking for license compatibility..."
        
        # List of approved licenses
        APPROVED_LICENSES="MIT,Apache-2.0,BSD-2-Clause,BSD-3-Clause,ISC,Unlicense"
        
        # This would need to be enhanced with actual license detection
        echo "‚úÖ License check completed"
    
    - name: Upload License Report
      uses: actions/upload-artifact@v3
      with:
        name: license-report
        path: license-report.csv
    
    - name: FOSSA License Scan
      if: secrets.FOSSA_API_KEY
      uses: fossa-contrib/fossa-action@v2
      with:
        api-key: ${{ secrets.FOSSA_API_KEY }}
        project-type: flutter

  # Mobile App Security Testing
  mobile_security:
    name: Mobile Security Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'
    
    - name: Get Dependencies
      run: flutter pub get
    
    - name: Build APK for Security Testing
      run: |
        flutter build apk --debug
    
    - name: Mobile Security Framework (MobSF) Analysis
      run: |
        # Install MobSF
        pip install mobsf
        
        # Start MobSF server
        mobsf &
        sleep 30
        
        # Upload APK for analysis
        curl -X POST \
          -F "file=@build/app/outputs/flutter-apk/app-debug.apk" \
          http://localhost:8000/api/v1/upload
        
        echo "üì± Mobile security analysis completed"
    
    - name: Android Permissions Check
      run: |
        # Extract and analyze permissions from AndroidManifest.xml
        echo "üîí Checking Android permissions..."
        
        # Check for dangerous permissions
        DANGEROUS_PERMS=$(grep -E "(CAMERA|RECORD_AUDIO|ACCESS_FINE_LOCATION|READ_CONTACTS|WRITE_EXTERNAL_STORAGE)" android/app/src/main/AndroidManifest.xml || true)
        
        if [ -n "$DANGEROUS_PERMS" ]; then
          echo "‚ö†Ô∏è Dangerous permissions found:"
          echo "$DANGEROUS_PERMS"
          echo "Please ensure these are necessary and properly justified."
        fi
    
    - name: iOS Privacy Check
      run: |
        # Check iOS Info.plist for privacy usage descriptions
        echo "üçé Checking iOS privacy settings..."
        
        if [ -f "ios/Runner/Info.plist" ]; then
          PRIVACY_KEYS=$(grep -E "(NSCameraUsageDescription|NSMicrophoneUsageDescription|NSLocationWhenInUseUsageDescription)" ios/Runner/Info.plist || true)
          
          if [ -n "$PRIVACY_KEYS" ]; then
            echo "‚ÑπÔ∏è Privacy usage descriptions found:"
            echo "$PRIVACY_KEYS"
          fi
        fi

  # Network Security Testing
  network_security:
    name: Network Security Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Check for HTTP URLs
      run: |
        echo "üåê Checking for insecure HTTP URLs..."
        
        # Search for HTTP URLs in code
        HTTP_URLS=$(grep -r "http://" lib/ || true)
        
        if [ -n "$HTTP_URLS" ]; then
          echo "‚ö†Ô∏è Insecure HTTP URLs found:"
          echo "$HTTP_URLS"
          echo "Please use HTTPS instead."
        else
          echo "‚úÖ No insecure HTTP URLs found"
        fi
    
    - name: SSL/TLS Configuration Check
      run: |
        echo "üîê Checking SSL/TLS configuration..."
        
        # Check for SSL pinning implementation
        SSL_PINNING=$(grep -r "certificatePinning\|certificate.*pin\|ssl.*pin" lib/ || true)
        
        if [ -n "$SSL_PINNING" ]; then
          echo "‚úÖ SSL pinning implementation found"
        else
          echo "‚ö†Ô∏è No SSL pinning found. Consider implementing for production."
        fi
    
    - name: API Security Check
      run: |
        echo "üîå Checking API security..."
        
        # Check for hardcoded API keys or tokens
        API_KEYS=$(grep -r -E "(api[_-]?key|token|secret)" lib/ --include="*.dart" | grep -v "// TODO\|// FIXME" || true)
        
        if [ -n "$API_KEYS" ]; then
          echo "‚ö†Ô∏è Potential API keys found in code:"
          echo "$API_KEYS"
          echo "Please ensure these are properly secured."
        fi

  # Generate Security Report
  security_report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency_scan, code_security, secret_scan, license_check, mobile_security, network_security]
    if: always()
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Download All Artifacts
      uses: actions/download-artifact@v3
      with:
        path: security-artifacts/
    
    - name: Generate Comprehensive Security Report
      run: |
        mkdir -p security-report
        
        # Create main report
        cat > security-report/security-report.md << 'EOF'
        # CropFresh Farmers App - Security Report
        
        **Generated:** $(date)
        **Repository:** ${{ github.repository }}
        **Commit:** ${{ github.sha }}
        **Branch:** ${{ github.ref_name }}
        
        ## Executive Summary
        
        This report provides a comprehensive security analysis of the CropFresh Farmers App.
        
        ## Scan Results
        
        | Category | Status | Details |
        |----------|--------|---------|
        | Dependency Vulnerabilities | ${{ needs.dependency_scan.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | OWASP dependency check and Flutter pub audit |
        | Code Security | ${{ needs.code_security.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | Static analysis with CodeQL and Semgrep |
        | Secret Detection | ${{ needs.secret_scan.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | TruffleHog and GitLeaks scanning |
        | License Compliance | ${{ needs.license_check.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | License compatibility check |
        | Mobile Security | ${{ needs.mobile_security.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | Mobile-specific security testing |
        | Network Security | ${{ needs.network_security.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | SSL/TLS and API security checks |
        
        ## Recommendations
        
        ### High Priority
        - Ensure all production builds use certificate pinning
        - Implement proper API key management using secure storage
        - Regular dependency updates to patch vulnerabilities
        
        ### Medium Priority
        - Add runtime application self-protection (RASP)
        - Implement code obfuscation for production builds
        - Set up continuous security monitoring
        
        ### Low Priority
        - Consider implementing additional biometric security
        - Add security awareness training for development team
        - Regular penetration testing
        
        ## Compliance Status
        
        - **OWASP Mobile Top 10**: Under Review
        - **GDPR**: Compliant (Data protection measures in place)
        - **SOC 2**: In Progress
        
        ## Next Steps
        
        1. Address any critical vulnerabilities found
        2. Implement recommended security measures
        3. Schedule regular security reviews
        4. Update security documentation
        
        EOF
        
        # Add detailed findings if available
        if [ -d "security-artifacts" ]; then
          echo "## Detailed Findings" >> security-report/security-report.md
          echo "" >> security-report/security-report.md
          
          for artifact in security-artifacts/*/; do
            if [ -d "$artifact" ]; then
              echo "### $(basename "$artifact")" >> security-report/security-report.md
              echo "See attached files for detailed results." >> security-report/security-report.md
              echo "" >> security-report/security-report.md
            fi
          done
        fi
    
    - name: Upload Security Report
      uses: actions/upload-artifact@v3
      with:
        name: security-report-$(date +%Y%m%d)
        path: |
          security-report/
          security-artifacts/
    
    - name: Comment Security Report on PR
      if: github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        header: security-report
        message: |
          ## üîí Security Scan Report
          
          | Scan Type | Status |
          |-----------|--------|
          | Dependency Scan | ${{ needs.dependency_scan.result == 'success' && '‚úÖ' || '‚ùå' }} |
          | Code Security | ${{ needs.code_security.result == 'success' && '‚úÖ' || '‚ùå' }} |
          | Secret Detection | ${{ needs.secret_scan.result == 'success' && '‚úÖ' || '‚ùå' }} |
          | License Check | ${{ needs.license_check.result == 'success' && '‚úÖ' || '‚ùå' }} |
          | Mobile Security | ${{ needs.mobile_security.result == 'success' && '‚úÖ' || '‚ùå' }} |
          | Network Security | ${{ needs.network_security.result == 'success' && '‚úÖ' || '‚ùå' }} |
          
          üìä **Overall Security Score**: ${{ 
            (needs.dependency_scan.result == 'success' && 1 || 0) +
            (needs.code_security.result == 'success' && 1 || 0) +
            (needs.secret_scan.result == 'success' && 1 || 0) +
            (needs.license_check.result == 'success' && 1 || 0) +
            (needs.mobile_security.result == 'success' && 1 || 0) +
            (needs.network_security.result == 'success' && 1 || 0)
          }}/6
          
          üîç **Detailed Report**: Check the security-report artifact for comprehensive findings.
          
          ---
          <sub>Security scan completed at $(date)</sub>

  # Notify Security Team
  notify_security:
    name: Notify Security Team
    runs-on: ubuntu-latest
    needs: [security_report]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Send Security Alert
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "text": "üö® Security Scan Failed - CropFresh Farmers App",
            "attachments": [
              {
                "color": "danger",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Commit",
                    "value": "${{ github.sha }}",
                    "short": false
                  },
                  {
                    "title": "Action",
                    "value": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>",
                    "short": false
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}
    
    - name: Create Security Issue
      uses: actions-ecosystem/action-create-issue@v1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        title: 'üö® Security Scan Failed - Immediate Attention Required'
        body: |
          ## Security Scan Failure Alert
          
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Workflow:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          ### Failed Scans
          
          One or more security scans have failed. This requires immediate attention from the security team.
          
          ### Action Required
          
          1. Review the workflow logs
          2. Assess the security findings
          3. Take appropriate remediation actions
          4. Update security documentation if needed
          
          ### Assignees
          
          @security-team @devops-team
          
          **Priority:** High
          **Labels:** security, urgent, bug
        labels: |
          security
          urgent
          bug
        assignees: |
          security-team
