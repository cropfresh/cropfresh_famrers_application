name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.16.0'
  JAVA_VERSION: '17'
  NODE_VERSION: '18'

jobs:
  # Static Analysis and Code Quality
  code_quality:
    name: Code Quality & Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
    
    - name: Get Flutter Dependencies
      run: flutter pub get
    
    - name: Verify Flutter Installation
      run: flutter doctor -v
    
    - name: Check Flutter Formatting
      run: dart format --output=none --set-exit-if-changed .
    
    - name: Analyze Flutter Code
      run: flutter analyze --fatal-infos
    
    - name: Run Custom Lint Rules
      run: dart run custom_lint
      continue-on-error: true
    
    - name: Check for Unused Dependencies
      run: |
        flutter pub deps
        dart run dependency_validator
      continue-on-error: true
    
    - name: Security Audit
      run: |
        flutter pub audit
      continue-on-error: true

  # Unit and Widget Tests
  test:
    name: Unit & Widget Tests
    runs-on: ubuntu-latest
    needs: code_quality
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
    
    - name: Get Dependencies
      run: flutter pub get
    
    - name: Generate Code
      run: |
        flutter packages pub run build_runner build --delete-conflicting-outputs
    
    - name: Run Unit Tests
      run: |
        flutter test --coverage --reporter=github
    
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage/lcov.info
        name: cropfresh-farmers-app
        fail_ci_if_error: false
    
    - name: Generate Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Flutter Tests
        path: test-results.json
        reporter: flutter-json

  # Integration Tests
  integration_test:
    name: Integration Tests
    runs-on: macos-latest
    needs: test
    strategy:
      matrix:
        device: [
          'iPhone 15 Pro',
          'iPad Pro (12.9-inch) (6th generation)'
        ]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
    
    - name: Setup iOS Simulator
      uses: futureware-tech/simulator-action@v2
      with:
        model: ${{ matrix.device }}
    
    - name: Get Dependencies
      run: flutter pub get
    
    - name: Generate Code
      run: |
        flutter packages pub run build_runner build --delete-conflicting-outputs
    
    - name: Run Integration Tests
      run: |
        flutter test integration_test/ --device-id=$(xcrun simctl list devices | grep "iPhone 15 Pro" | grep "Booted" | awk -F'[()]' '{print $2}' | head -1)
    
    - name: Upload Integration Test Results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: integration-test-failures-${{ matrix.device }}
        path: |
          integration_test/screenshots/
          integration_test/logs/

  # Android Build
  build_android:
    name: Build Android APK/AAB
    runs-on: ubuntu-latest
    needs: [code_quality, test]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: ${{ env.JAVA_VERSION }}
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
    
    - name: Get Dependencies
      run: flutter pub get
    
    - name: Generate Code
      run: |
        flutter packages pub run build_runner build --delete-conflicting-outputs
    
    - name: Setup Keystore
      if: github.ref == 'refs/heads/main'
      run: |
        echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks
        echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" > android/key.properties
        echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
        echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties
        echo "storeFile=keystore.jks" >> android/key.properties
    
    - name: Build Android APK (Debug)
      if: github.ref != 'refs/heads/main'
      run: |
        flutter build apk --debug --target-platform android-arm64
    
    - name: Build Android APK (Release)
      if: github.ref == 'refs/heads/main'
      run: |
        flutter build apk --release --target-platform android-arm64
    
    - name: Build Android App Bundle (Release)
      if: github.ref == 'refs/heads/main'
      run: |
        flutter build appbundle --release
    
    - name: Upload APK Artifact
      uses: actions/upload-artifact@v3
      with:
        name: android-apk-${{ github.sha }}
        path: |
          build/app/outputs/flutter-apk/*.apk
    
    - name: Upload AAB Artifact
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: android-aab-${{ github.sha }}
        path: |
          build/app/outputs/bundle/release/*.aab
    
    - name: Run Android Tests
      run: |
        cd android
        ./gradlew testDebugUnitTest
    
    - name: Upload Android Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: android-test-results
        path: android/app/build/test-results/

  # iOS Build
  build_ios:
    name: Build iOS IPA
    runs-on: macos-latest
    needs: [code_quality, test]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'
    
    - name: Install CocoaPods
      run: |
        sudo gem install cocoapods
        pod --version
    
    - name: Get Dependencies
      run: flutter pub get
    
    - name: Generate Code
      run: |
        flutter packages pub run build_runner build --delete-conflicting-outputs
    
    - name: Install iOS Dependencies
      run: |
        cd ios
        pod install
    
    - name: Setup iOS Certificates
      if: github.ref == 'refs/heads/main'
      env:
        IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
        IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
      run: |
        # Decode and install certificate
        echo "$IOS_CERTIFICATE_BASE64" | base64 --decode > certificate.p12
        security create-keychain -p "" build.keychain
        security import certificate.p12 -k build.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
        security list-keychains -s build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
        
        # Install provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo "$IOS_PROVISIONING_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
    
    - name: Build iOS (Debug)
      if: github.ref != 'refs/heads/main'
      run: |
        flutter build ios --debug --no-codesign
    
    - name: Build iOS (Release)
      if: github.ref == 'refs/heads/main'
      run: |
        flutter build ios --release
    
    - name: Build IPA
      if: github.ref == 'refs/heads/main'
      run: |
        cd ios
        xcodebuild -workspace Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath Runner.xcarchive \
          archive
        
        xcodebuild -exportArchive \
          -archivePath Runner.xcarchive \
          -exportPath ipa \
          -exportOptionsPlist ExportOptions.plist
    
    - name: Upload iOS Artifact
      uses: actions/upload-artifact@v3
      with:
        name: ios-ipa-${{ github.sha }}
        path: |
          ios/ipa/*.ipa
      if: github.ref == 'refs/heads/main'

  # Web Build
  build_web:
    name: Build Web App
    runs-on: ubuntu-latest
    needs: [code_quality, test]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
    
    - name: Enable Flutter Web
      run: flutter config --enable-web
    
    - name: Get Dependencies
      run: flutter pub get
    
    - name: Generate Code
      run: |
        flutter packages pub run build_runner build --delete-conflicting-outputs
    
    - name: Build Web App
      run: |
        flutter build web --release --web-renderer html
    
    - name: Upload Web Artifact
      uses: actions/upload-artifact@v3
      with:
        name: web-build-${{ github.sha }}
        path: build/web/
    
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./build/web

  # Security Scanning
  security_scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: code_quality
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
    
    - name: Get Dependencies
      run: flutter pub get
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'CropFresh Farmers App'
        path: '.'
        format: 'ALL'
        out: 'dependency-check-report'
    
    - name: Upload Dependency Check results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: dependency-check-report/

  # Performance Testing
  performance_test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build_web
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Download Web Build
      uses: actions/download-artifact@v3
      with:
        name: web-build-${{ github.sha }}
        path: build/web/
    
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x
    
    - name: Serve Web App
      run: |
        npm install -g http-server
        http-server build/web -p 8080 &
        sleep 5
    
    - name: Run Lighthouse CI
      run: |
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
    
    - name: Upload Lighthouse Report
      uses: actions/upload-artifact@v3
      with:
        name: lighthouse-report
        path: .lighthouseci/

  # Release Management
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build_android, build_ios, build_web, security_scan]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get Version from pubspec.yaml
      id: version
      run: |
        VERSION=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "TAG=v$VERSION" >> $GITHUB_OUTPUT
    
    - name: Download Android Artifacts
      uses: actions/download-artifact@v3
      with:
        name: android-apk-${{ github.sha }}
        path: artifacts/android/
    
    - name: Download Android AAB
      uses: actions/download-artifact@v3
      with:
        name: android-aab-${{ github.sha }}
        path: artifacts/android/
    
    - name: Download iOS Artifacts
      uses: actions/download-artifact@v3
      with:
        name: ios-ipa-${{ github.sha }}
        path: artifacts/ios/
    
    - name: Download Web Artifacts
      uses: actions/download-artifact@v3
      with:
        name: web-build-${{ github.sha }}
        path: artifacts/web/
    
    - name: Generate Release Notes
      id: release_notes
      run: |
        # Generate changelog from commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          COMMITS=$(git log --pretty=format:"- %s" --reverse)
        else
          COMMITS=$(git log --pretty=format:"- %s" --reverse $LAST_TAG..HEAD)
        fi
        
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        echo "## What's Changed" >> $GITHUB_OUTPUT
        echo "$COMMITS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.TAG }}
        name: CropFresh Farmers App ${{ steps.version.outputs.VERSION }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        draft: false
        prerelease: false
        files: |
          artifacts/android/*
          artifacts/ios/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Deployment
  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build_android, build_ios, build_web]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Download Web Build
      uses: actions/download-artifact@v3
      with:
        name: web-build-${{ github.sha }}
        path: build/web/
    
    - name: Deploy to Firebase Hosting (Staging)
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: '${{ secrets.GITHUB_TOKEN }}'
        firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_STAGING }}'
        projectId: cropfresh-staging
        channelId: live
        target: staging
    
    - name: Upload to Play Console (Internal Testing)
      if: github.ref == 'refs/heads/develop'
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
        packageName: com.cropfresh.farmers
        releaseFiles: artifacts/android/*.aab
        track: internal
        status: completed

  deploy_production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [release]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')
    environment: production
    
    steps:
    - name: Download Web Build
      uses: actions/download-artifact@v3
      with:
        name: web-build-${{ github.sha }}
        path: build/web/
    
    - name: Deploy to Firebase Hosting (Production)
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: '${{ secrets.GITHUB_TOKEN }}'
        firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_PRODUCTION }}'
        projectId: cropfresh-production
        channelId: live
        target: production
    
    - name: Upload to Play Console (Production)
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
        packageName: com.cropfresh.farmers
        releaseFiles: artifacts/android/*.aab
        track: production
        status: completed
    
    - name: Upload to App Store Connect
      uses: apple-actions/upload-testflight-build@v1
      with:
        app-path: artifacts/ios/*.ipa
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
        api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}

  # Notification
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy_staging, deploy_production]
    if: always()
    
    steps:
    - name: Notify Slack on Success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "✅ CropFresh Farmers App deployment successful!"
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify Slack on Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "❌ CropFresh Farmers App deployment failed!"
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
